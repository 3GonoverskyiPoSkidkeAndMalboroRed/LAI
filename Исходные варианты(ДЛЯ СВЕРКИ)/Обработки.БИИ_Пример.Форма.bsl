// ТЕСТОВАЯ ФУНКЦИЯ 
&НаСервере
Функция GetNomenclatureList()
	Сообщить("[ОТЛАДКА] Начало выполнения функции GetNomenclatureList");
	
	запрос = новый запрос;
	запрос.Текст =
	"ВЫБРАТЬ
	|    Номенклатура.Наименование КАК Наименование
	|ИЗ
	|    Справочник.Номенклатура КАК Номенклатура";
	
	выб = запрос.Выполнить().Выбрать();
	списокНаименований = Новый Массив;
	
	Пока выб.Следующий() Цикл
		списокНаименований.Добавить(выб.Наименование);
	КонецЦикла;
	
	Сообщить("[ОТЛАДКА] Завершение функции GetNomenclatureList, найдено наименований: " + списокНаименований.Количество());
	Возврат списокНаименований;
КонецФункции



&НаСервере
Функция GetGoodsBalance(параметры)
	Сообщить("[ОТЛАДКА] Начало выполнения функции GetGoodsBalance");
	Сообщить("[ОТЛАДКА] Входящие параметры: " + параметры);
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(параметры);	
	данные = ПрочитатьJSON(ЧтениеJSON);
	ЧтениеJSON.Закрыть();
	Сообщить("[ОТЛАДКА] Данные после чтения JSON: " + данные.GoodsName);
	
    запрос = новый запрос;
	запрос.Текст =
	"ВЫБРАТЬ
	|	ТоварыНаСкладахОстатки.ВНаличииОстаток КАК ВНаличииОстаток
	|ИЗ
	|	РегистрНакопления.ТоварыНаСкладах.Остатки(, Номенклатура.Наименование ПОДОБНО &Товар) КАК ТоварыНаСкладахОстатки";
	запрос.УстановитьПараметр("Товар","%"+данные.GoodsName+"%");
	Сообщить("[ОТЛАДКА] Параметр запроса Товар: " + "%"+данные.GoodsName+"%");
	
	выб = запрос.Выполнить().Выбрать();
	Сообщить("[ОТЛАДКА] Запрос выполнен");
	
	если выб.Следующий() тогда
		Сообщить("[ОТЛАДКА] Товар найден, остаток: " + строка(выб.ВНаличииОстаток));
		возврат строка(выб.ВНаличииОстаток);
	иначе
		Сообщить("[ОТЛАДКА] Товар не найден: " + данные.GoodsName);
		возврат "Не найден товар: "+данные.GoodsName;
	конецесли;	
	
	Сообщить("[ОТЛАДКА] Завершение функции GetGoodsBalance");
КонецФункции

&НаСервере
Функция GetMutalSettlementsBalance(параметры)
	Сообщить("[ОТЛАДКА] Начало выполнения функции GetMutalSettlementsBalance");
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(параметры);	
	данные = ПрочитатьJSON(ЧтениеJSON);
	ЧтениеJSON.Закрыть();
	Сообщить("[ОТЛАДКА] Данные после чтения JSON: " + данные);
	баланс = 0;

	запрос = новый запрос;
	запрос.Текст =
	"ВЫБРАТЬ
	|	ЕСТЬNULL(РасчетыСКлиентамиОстатки.СуммаОстаток, 0) КАК СуммаОстаток
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентами.Остатки(, АналитикаУчетаПоПартнерам.Контрагент.Наименование ПОДОБНО &Контрагент) КАК РасчетыСКлиентамиОстатки";
	запрос.УстановитьПараметр("Контрагент","%"+данные.Partner+"%");
	Сообщить("[ОТЛАДКА] Параметр запроса Контрагент: " + "%"+данные.Partner+"%");
	выб = запрос.Выполнить().Выбрать();
	если выб.Следующий() тогда
		баланс=выб.СуммаОстаток;
		Сообщить("[ОТЛАДКА] Баланс по расчетам с клиентами: " + баланс);
	конецесли;	

	запрос = новый запрос;
	запрос.Текст =
	"ВЫБРАТЬ
	|	ЕСТЬNULL(РасчетыСПоставщикамиОстатки.СуммаОстаток, 0) КАК СуммаОстаток
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщиками.Остатки(, АналитикаУчетаПоПартнерам.Контрагент.Наименование ПОДОБНО &Контрагент) КАК РасчетыСПоставщикамиОстатки";
	запрос.УстановитьПараметр("Контрагент","%"+данные.Partner+"%");
	выб = запрос.Выполнить().Выбрать();
	если выб.Следующий() тогда
		баланс=баланс+выб.СуммаОстаток;
		Сообщить("[ОТЛАДКА] Баланс по расчетам с поставщиками: " + выб.СуммаОстаток);
	конецесли;	
	Сообщить("[ОТЛАДКА] Завершение функции GetMutalSettlementsBalance, общий баланс: " + баланс);
    возврат баланс;
КонецФункции

&НаСервере
Функция need_help(параметры)
	Сообщить("[ОТЛАДКА] Начало выполнения функции need_help");
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(параметры);	
	данные = ПрочитатьJSON(ЧтениеJSON);
	ЧтениеJSON.Закрыть();
	Сообщить("[ОТЛАДКА] Данные после чтения JSON: " + данные);
	возврат "Не удалось подобрать функцию для вопроса:"+символы.ПС+данные.UserRequest;
КонецФункции


&НаСервере
Процедура Вызов(имя, параметры)
	Сообщить("[ОТЛАДКА] Вызов функции: " + имя + ", параметры: " + параметры);
	если имя="GetGoodsBalance" тогда
		Ответ = Ответ + GetGoodsBalance(параметры) + символы.ПС;
		Сообщить("[ОТЛАДКА] Вызвана функция GetGoodsBalance");
	иначеесли имя="GetMutalSettlementsBalance" тогда
		Ответ = Ответ + GetMutalSettlementsBalance(параметры) + символы.ПС;
		Сообщить("[ОТЛАДКА] Вызвана функция GetMutalSettlementsBalance");
	иначеесли имя="need_help" тогда
		Ответ = Ответ + need_help(параметры) + символы.ПС;
		Сообщить("[ОТЛАДКА] Вызвана функция need_help");
	конецесли;	
КонецПроцедуры	


&НаКлиенте
Процедура УстановитьВидимостьЭлементов()
	Сообщить("[ОТЛАДКА] Установка видимости элементов");
	элементы.Размышления.Видимость=ПолныйОтвет;
	элементы.ВходныеТокены.Видимость=ПолныйОтвет;
	элементы.ВходныеТокеныВКеше.Видимость=ПолныйОтвет;
	элементы.ВходныеТокеныЗаКешем.Видимость=ПолныйОтвет;
	элементы.ВыходныеТокены.Видимость=ПолныйОтвет;
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Сообщить("[ОТЛАДКА] Начало процедуры ПриСозданииНаСервере");
	БиблиотекаИскусственногоИнтеллекта.ПроверитьИЗаполнитьСправочники();
	Сообщить("[ОТЛАДКА] Завершение процедуры ПриСозданииНаСервере");
КонецПроцедуры
&НаСервере
Функция ПолучитьМассивИнструментов()
	Сообщить("[ОТЛАДКА] Начало функции ПолучитьМассивИнструментов");
	ми = новый массив;
	выб = справочники.БИИ_Инструменты.Выбрать();
	Сообщить("[ОТЛАДКА] Выбор инструментов из справочника БИИ_Инструменты");
	пока выб.Следующий() цикл
		если не выб.Встроенный тогда
			ми.Добавить(выб.Ссылка);
			Сообщить("[ОТЛАДКА] Добавление инструмента: " + выб.Ссылка);
		конецесли;	
	конеццикла;
	Сообщить("[ОТЛАДКА] Завершение функции ПолучитьМассивИнструментов, количество инструментов: " + ми.Количество());
	возврат ми;
КонецФункции
&НаКлиенте
Процедура ПолучитьОтвет(Команда)
	Сообщить("[ОТЛАДКА] Начало процедуры ПолучитьОтвет");
	если значениезаполнено(Изображение) тогда
		Сообщить("[ОТЛАДКА] Изображение заполнено");
		стПромт=новый структура;
		стПромт.Вставить("текст",Промт);
		дд=новый ДвоичныеДанные(Изображение);
		//стПромт.Вставить("изображение","data:image/png;base64,"+Base64Строка(дд));

		стПромт.Вставить("тип","image/png");
		стПромт.Вставить("изображение",Base64Строка(дд));
		Сообщить("[ОТЛАДКА] Изображение добавлено в структуру");
	иначе
		стПромт=Промт;
		Сообщить("[ОТЛАДКА] Изображение не заполнено, используется текстовый промт");
	конецесли;
	
	опции = новый структура;
	если значениезаполнено(БюджетРазмышлений) тогда
		Сообщить("[ОТЛАДКА] Бюджет размышлений заполнен");
		ст = новый структура;
		ст.Вставить("type","enabled");
		ст.Вставить("budget_tokens",БюджетРазмышлений);
		опции.Вставить("thinking",ст);
	конецесли;
	
	если РежимРассуждений тогда
		Сообщить("[ОТЛАДКА] Режим рассуждений включен");
		ст = новый структура;
		ст.Вставить("mode","ENABLED_HIDDEN");
		опции.Вставить("reasoningOptions",ст);
    конецесли;
	
	если опции.Количество()=0 тогда
		опции = неопределено;
		Сообщить("[ОТЛАДКА] Опции не заполнены, устанавливается неопределено");
	конецесли;
	
	ми = ПолучитьМассивИнструментов();
	если ми.Количество()=0 тогда
		Сообщить("[ОТЛАДКА] Массив инструментов пуст");
		если значениезаполнено(СхемаОтвета) тогда
			результат = БиблиотекаИскусственногоИнтеллекта.Генерация(стПромт, Модель, Температура,,СистемныйПромт,ПолныйОтвет,СхемаОтвета,опции);
		иначе	
			результат = БиблиотекаИскусственногоИнтеллекта.Генерация(стПромт, Модель, Температура,,СистемныйПромт,ПолныйОтвет,,опции);
		конецесли;
		если результат=неопределено тогда
			Сообщить("[ОТЛАДКА] Результат неопределен, устанавливаем пустые значения");
			Ответ = "";
			Размышления = "";
			ВходныеТокены = 0;
			ВходныеТокеныВКеше = 0;
			ВходныеТокеныЗаКешем = 0;
			ВыходныеТокены = 0;
		иначе
			если ПолныйОтвет тогда
				Ответ = результат.ТекстОтвета;
				Размышления = результат.Размышления;
				ВходныеТокены = результат.ВходныеТокены;
				ВходныеТокеныВКеше = результат.ВходныеТокеныВКеше;
				ВходныеТокеныЗаКешем = результат.ВходныеТокеныЗаКешем;
				ВыходныеТокены = результат.ВыходныеТокены;
				Сообщить("[ОТЛАДКА] Получены полные данные из результата");
			иначе	
				Ответ = результат;
				Сообщить("[ОТЛАДКА] Получен неполный ответ");
			конецесли;	
		конецесли;
	иначе
		Сообщить("[ОТЛАДКА] Генерация с массивом инструментов");
		результат = БиблиотекаИскусственногоИнтеллекта.Генерация(стПромт, Модель, Температура, ми,СистемныйПромт,ПолныйОтвет,,опции);
		если строка(типзнч(результат))="Массив" тогда
			Сообщить("[ОТЛАДКА] Результат является массивом");
			Ответ = "";
			Размышления = "";
			ВходныеТокены = 0;
			ВходныеТокеныВКеше = 0;
			ВходныеТокеныЗаКешем = 0;
			ВыходныеТокены = 0;
			для каждого стр из результат цикл
				Вызов(стр.function.name, стр.function.arguments);
			конеццикла;	
		иначе
			если ПолныйОтвет тогда
				Ответ = результат.ТекстОтвета;
				Размышления = результат.Размышления;
				ВходныеТокены = результат.ВходныеТокены;
				ВходныеТокеныВКеше = результат.ВходныеТокеныВКеше;
				ВходныеТокеныЗаКешем = результат.ВходныеТокеныЗаКешем;
				ВыходныеТокены = результат.ВыходныеТокены;
				Сообщить("[ОТЛАДКА] Получены полные данные из результата");
			иначе	
				Ответ = результат;
				Сообщить("[ОТЛАДКА] Получен неполный ответ");
			конецесли;	
		конецесли;
	конецесли;
КонецПроцедуры

&НаКлиенте
Процедура ПолныйОтветПриИзменении(Элемент)
	УстановитьВидимостьЭлементов();
	Сообщить("[ОТЛАДКА] Полный ответ изменен");
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	УстановитьВидимостьЭлементов();
	Сообщить("[ОТЛАДКА] Форма открыта");
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьПоискВИнтернете()
	Сообщить("[ОТЛАДКА] Запрос на поиск в интернете");
	возврат справочники.БИИ_Инструменты.НайтиПоНаименованию("web_search_preview")
КонецФункции	

&НаСервереБезКонтекста
Функция ПолучитьПоискВВекторнойБазе()
	Сообщить("[ОТЛАДКА] Запрос на поиск в векторной базе");
	возврат справочники.БИИ_Инструменты.НайтиПоНаименованию("file_search")
КонецФункции	
	
&НаКлиенте
Процедура ПолучитьОтветResponse(Команда)
	если ПоискВИнтернете тогда
		минст = новый массив;
		минст.Добавить(ПолучитьПоискВИнтернете());
		результат = БиблиотекаИскусственногоИнтеллекта.Ответ(Промт, Модель, минст, ,РежимЧата);
		Сообщить("[ОТЛАДКА] Получен ответ из поиска в интернете");
	иначеесли ПоискВВекторнойБазе тогда
		опции = новый структура;
		опции.Вставить("vector_store_id",idВекторнойБазы);
		минст = новый массив;
		минст.Добавить(ПолучитьПоискВВекторнойБазе());
		результат = БиблиотекаИскусственногоИнтеллекта.Ответ(Промт, Модель, минст, опции, РежимЧата);
		Сообщить("[ОТЛАДКА] Получен ответ из векторной базы");
	иначе	
		если РежимЧата тогда
			если чат.Количество()>0 тогда
				опции = новый структура;
				опции.Вставить("previous_response_id",чат[чат.Количество()-1].id);
				результат = БиблиотекаИскусственногоИнтеллекта.Ответ(Промт, Модель, ,опции , истина);
				Сообщить("[ОТЛАДКА] Получен ответ с предыдущим ID");
			иначе
				результат = БиблиотекаИскусственногоИнтеллекта.Ответ(Промт, Модель, , , истина);
				Сообщить("[ОТЛАДКА] Получен ответ без предыдущего ID");
			конецесли;	
		иначе	
			результат = БиблиотекаИскусственногоИнтеллекта.Ответ(Промт, Модель);
			Сообщить("[ОТЛАДКА] Получен ответ в обычном режиме");
		конецесли;	
	конецесли;
	если РежимЧата тогда
		Ответ = Ответ + символы.ПС + "Вопрос:" + символы.ПС + Промт;
		Ответ = Ответ + символы.ПС + "Ответ:" + символы.ПС + результат.ТекстОтвета;
		нстр = Чат.Добавить();
		нстр.id = результат.id;
		Сообщить("[ОТЛАДКА] Ответ добавлен в чат");
	иначе	
		Ответ = результат;
		Сообщить("[ОТЛАДКА] Ответ получен и сохранен");
	конецесли;	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьВекторнуюБазу(Команда)
	идбазы = БиблиотекаИскусственногоИнтеллекта.СоздатьВекторнуюБазу(ИмяВекторнойБазы,Провайдер);
	если идбазы<>неопределено тогда
		idВекторнойБазы = идбазы;
		Сообщить("[ОТЛАДКА] Векторная база создана с ID: " + idВекторнойБазы);
	конецесли;
КонецПроцедуры

&НаКлиенте
Процедура РазместитьВБазе(Команда)
	Сообщить("[ОТЛАДКА] Начало размещения файла в базе");
	идфайла = БиблиотекаИскусственногоИнтеллекта.РазместитьФайл(idВекторнойБазы,idФайла,Провайдер);
	если идфайла<>неопределено тогда
		idФайлаВБазе = идфайла;
		Сообщить("[ОТЛАДКА] Файл успешно размещен в базе с ID: " + idФайлаВБазе);
	иначе
		Сообщить("[ОТЛАДКА] Ошибка при размещении файла в базе");
	конецесли;
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьФайл(Команда)
	Сообщить("[ОТЛАДКА] Начало загрузки файла: " + ИмяФайла);
	дд = новый ДвоичныеДанные(ИмяФайла);
	идфайла = БиблиотекаИскусственногоИнтеллекта.ЗагрузитьФайл(ИмяФайлаВХранилище,дд,Провайдер);
	если идфайла<>неопределено тогда
		idФайла = идфайла;
		Сообщить("[ОТЛАДКА] Файл успешно загружен с ID: " + idФайла);
	иначе
		Сообщить("[ОТЛАДКА] Ошибка при загрузке файла");
	конецесли;
КонецПроцедуры

&НаКлиенте
Процедура НовыйЧат(Команда)
	Сообщить("[ОТЛАДКА] Начало нового чата");
	Чат.Очистить();
	Ответ = "";
	Сообщить("[ОТЛАДКА] Чат очищен");
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьРезультатЗапроса(Команда)
	Сообщить("[ОТЛАДКА] Получение результата запроса: " + ТекстЗапроса);
	РезультатЗапроса = БиблиотекаИскусственногоИнтеллекта.ПолучитьРезультатВыполненияЗапроса(ТекстЗапроса,ТипРезультатаЗапроса);
	Сообщить("[ОТЛАДКА] Результат запроса получен");
КонецПроцедуры

