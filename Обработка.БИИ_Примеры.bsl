
&НаСервере
Функция GetGoodsBalance(параметры)
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(параметры);	
	данные = ПрочитатьJSON(ЧтениеJSON);
	ЧтениеJSON.Закрыть();
    запрос = новый запрос;
		запрос = новый запрос;
	// Правильный текст запроса с использованием временной таблицы
	запрос.Текст = 
		//"ВЫБРАТЬ
		//|	ТоварыНаСкладахОстатки.ВНаличииОстаток КАК ВНаличииОстаток
		//|ИЗ
		//|	РегистрНакопления.ТоварыНаСкладах.Остатки(, Номенклатура.Наименование ПОДОБНО &Товар) КАК ТоварыНаСкладахОстатки";	          
	
	            "ВЫБРАТЬ
		|	ТоварыНаСкладахОстатки.Номенклатура.Наименование КАК НоменклатураНаименование,
		|	ТоварыНаСкладахОстатки.ВНаличииОстаток КАК ВНаличииОстаток
		|ИЗ
		|	РегистрНакопления.ТоварыНаСкладах.Остатки(&ТекущаяДата, &Условие) КАК ТоварыНаСкладахОстатки
		|ГДЕ
		|	ТоварыНаСкладахОстатки.Номенклатура.Наименование ПОДОБНО &Товар";
	   
	// Устанавливаем параметр для текущей даты
	запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	// Устанавливаем пустое условие для виртуальной таблицы
	запрос.УстановитьПараметр("Условие", Новый Структура);
	
	
	
	
	
	
	
	
	
	// Устанавливаем параметр запроса
	запрос.УстановитьПараметр("Товар", "%" + данные.GoodsName + "%");
	
	// Выполняем запрос и получаем результат
	результатЗапроса = запрос.Выполнить();
	
	// Проверяем, получены ли данные
	если результатЗапроса.Пустой() тогда
		возврат "Не найден товар: " + данные.GoodsName;
	конецесли;
	
	// Получаем выборку
	выборка = результатЗапроса.Выбрать();
	
	// Формируем результат
	если выборка.Следующий() тогда
		возврат строка(выборка.ВНаличииОстаток);
	иначе
		возврат "Не найден товар: " + данные.GoodsName;
	конецесли;
	
КонецФункции

&НаСервере
Функция GetMutalSettlementsBalance(параметры)
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(параметры);	
	данные = ПрочитатьJSON(ЧтениеJSON);
	ЧтениеJSON.Закрыть();
	баланс = 0;

	запрос = новый запрос;
	запрос.Текст =
	"ВЫБРАТЬ
	|	ЕСТЬNULL(РасчетыСКлиентамиОстатки.СуммаОстаток, 0) КАК СуммаОстаток
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентами.Остатки(, АналитикаУчетаПоПартнерам.Контрагент.Наименование ПОДОБНО &Контрагент) КАК РасчетыСКлиентамиОстатки";
	запрос.УстановитьПараметр("Контрагент","%"+данные.Partner+"%");
	выб = запрос.Выполнить().Выбрать();
	если выб.Следующий() тогда
		баланс=выб.СуммаОстаток;
	конецесли;	

	запрос = новый запрос;
	запрос.Текст =
	"ВЫБРАТЬ
	|	ЕСТЬNULL(РасчетыСПоставщикамиОстатки.СуммаОстаток, 0) КАК СуммаОстаток
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщиками.Остатки(, АналитикаУчетаПоПартнерам.Контрагент.Наименование ПОДОБНО &Контрагент) КАК РасчетыСПоставщикамиОстатки";
	запрос.УстановитьПараметр("Контрагент","%"+данные.Partner+"%");
	выб = запрос.Выполнить().Выбрать();
	если выб.Следующий() тогда
		баланс=баланс+выб.СуммаОстаток;
	конецесли;	
    возврат баланс;
КонецФункции

&НаСервере
Функция need_help(параметры)
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(параметры);	
	данные = ПрочитатьJSON(ЧтениеJSON);
	ЧтениеJSON.Закрыть();
	возврат "Не удалось подобрать функцию для вопроса:"+символы.ПС+данные.UserRequest;
КонецФункции

&НаСервере
Процедура Вызов(имя,параметры)
	если имя="GetGoodsBalance" тогда
		Ответ = Ответ + GetGoodsBalance(параметры)+символы.ПС;
	иначеесли имя="GetMutalSettlementsBalance" тогда
		Ответ = Ответ + GetMutalSettlementsBalance(параметры)+символы.ПС;
	иначеесли имя="need_help" тогда
		Ответ = Ответ + need_help(параметры)+символы.ПС;
	конецесли;	
КонецПроцедуры	

&НаКлиенте
Процедура УстановитьВидимостьЭлементов()
	элементы.Размышления.Видимость=ПолныйОтвет;
	элементы.ВходныеТокены.Видимость=ПолныйОтвет;
	элементы.ВходныеТокеныВКеше.Видимость=ПолныйОтвет;
	элементы.ВходныеТокеныЗаКешем.Видимость=ПолныйОтвет;
	элементы.ВыходныеТокены.Видимость=ПолныйОтвет;
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	БиблиотекаИскусственногоИнтеллекта.ПроверитьИЗаполнитьСправочники();
КонецПроцедуры

&НаСервере
Функция ПолучитьМассивИнструментов()
	ми = новый массив;
	выб = справочники.БИИ_Инструменты.Выбрать();
	пока выб.Следующий() цикл
		если не выб.Встроенный тогда
			ми.Добавить(выб.Ссылка);
		конецесли;	
	конеццикла;
	возврат ми;
КонецФункции

&НаКлиенте
Процедура ПолучитьОтвет(Команда)
	если значениезаполнено(Изображение) тогда
		стПромт=новый структура;
		стПромт.Вставить("текст",Промт);
		дд=новый ДвоичныеДанные(Изображение);
		//стПромт.Вставить("изображение","data:image/png;base64,"+Base64Строка(дд));

		стПромт.Вставить("тип","image/png");
		стПромт.Вставить("изображение",Base64Строка(дд));
		
	иначе
		стПромт=Промт;
	конецесли;
	
	опции = новый структура;
	если значениезаполнено(БюджетРазмышлений) тогда
		ст = новый структура;
		ст.Вставить("type","enabled");
		ст.Вставить("budget_tokens",БюджетРазмышлений);
		опции.Вставить("thinking",ст);
	конецесли;
	
	если РежимРассуждений тогда
		ст = новый структура;
		ст.Вставить("mode","ENABLED_HIDDEN");
		опции.Вставить("reasoningOptions",ст);
    конецесли;
	
	если опции.Количество()=0 тогда
		опции = неопределено;
	конецесли;
	
	ми = ПолучитьМассивИнструментов();
	если ми.Количество()=0 тогда
		если значениезаполнено(СхемаОтвета) тогда
			результат = БиблиотекаИскусственногоИнтеллекта.Генерация(стПромт, Модель, Температура,,СистемныйПромт,ПолныйОтвет,СхемаОтвета,опции);
		иначе	
			результат = БиблиотекаИскусственногоИнтеллекта.Генерация(стПромт, Модель, Температура,,СистемныйПромт,ПолныйОтвет,,опции);
		конецесли;
		если результат=неопределено тогда
			Ответ = "";
			Размышления = "";
			ВходныеТокены = 0;
			ВходныеТокеныВКеше = 0;
			ВходныеТокеныЗаКешем = 0;
			ВыходныеТокены = 0;
		иначе
			если ПолныйОтвет тогда
				Ответ = результат.ТекстОтвета;
				Размышления = результат.Размышления;
				ВходныеТокены = результат.ВходныеТокены;
				ВходныеТокеныВКеше = результат.ВходныеТокеныВКеше;
				ВходныеТокеныЗаКешем = результат.ВходныеТокеныЗаКешем;
				ВыходныеТокены = результат.ВыходныеТокены;
			иначе	
				Ответ = результат;
			конецесли;	
		конецесли;
	иначе
		результат = БиблиотекаИскусственногоИнтеллекта.Генерация(стПромт, Модель, Температура, ми,СистемныйПромт,ПолныйОтвет,,опции);
		если строка(типзнч(результат))="Массив" тогда
			Ответ = "";
			Размышления = "";
			ВходныеТокены = 0;
			ВходныеТокеныВКеше = 0;
			ВходныеТокеныЗаКешем = 0;
			ВыходныеТокены = 0;
			для каждого стр из результат цикл
				Вызов(стр.function.name, стр.function.arguments);
			конеццикла;	
		иначе
			если ПолныйОтвет тогда
				Ответ = результат.ТекстОтвета;
				Размышления = результат.Размышления;
				ВходныеТокены = результат.ВходныеТокены;
				ВходныеТокеныВКеше = результат.ВходныеТокеныВКеше;
				ВходныеТокеныЗаКешем = результат.ВходныеТокеныЗаКешем;
				ВыходныеТокены = результат.ВыходныеТокены;
			иначе	
				Ответ = результат;
			конецесли;	
		конецесли;
	конецесли;
КонецПроцедуры

&НаКлиенте
Процедура ПолныйОтветПриИзменении(Элемент)
	УстановитьВидимостьЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	УстановитьВидимостьЭлементов();
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьПоискВИнтернете()
	возврат справочники.БИИ_Инструменты.НайтиПоНаименованию("web_search_preview")
КонецФункции	

&НаСервереБезКонтекста
Функция ПолучитьПоискВВекторнойБазе()
	возврат справочники.БИИ_Инструменты.НайтиПоНаименованию("file_search")
КонецФункции	
	
&НаКлиенте
Процедура ПолучитьОтветResponse(Команда)
	если ПоискВИнтернете тогда
		минст = новый массив;
		минст.Добавить(ПолучитьПоискВИнтернете());
		результат = БиблиотекаИскусственногоИнтеллекта.Ответ(Промт, Модель, минст, ,РежимЧата);
	иначеесли ПоискВВекторнойБазе тогда
		опции = новый структура;
		опции.Вставить("vector_store_id",idВекторнойБазы);
		минст = новый массив;
		минст.Добавить(ПолучитьПоискВВекторнойБазе());
		результат = БиблиотекаИскусственногоИнтеллекта.Ответ(Промт, Модель, минст, опции, РежимЧата);
	иначе	
		если РежимЧата тогда
			если чат.Количество()>0 тогда
				опции = новый структура;
				опции.Вставить("previous_response_id",чат[чат.Количество()-1].id);
				результат = БиблиотекаИскусственногоИнтеллекта.Ответ(Промт, Модель, ,опции , истина);
			иначе
				результат = БиблиотекаИскусственногоИнтеллекта.Ответ(Промт, Модель, , , истина);
			конецесли;	
		иначе	
			результат = БиблиотекаИскусственногоИнтеллекта.Ответ(Промт, Модель);
		конецесли;	
	конецесли;
	если РежимЧата тогда
		Ответ = Ответ + символы.ПС + "Вопрос:" + символы.ПС + Промт;
		Ответ = Ответ + символы.ПС + "Ответ:" + символы.ПС + результат.ТекстОтвета;
		нстр = Чат.Добавить();
		нстр.id = результат.id;
	иначе	
		Ответ = результат;
	конецесли;	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьВекторнуюБазу(Команда)
	идбазы = БиблиотекаИскусственногоИнтеллекта.СоздатьВекторнуюБазу(ИмяВекторнойБазы,Провайдер);
	если идбазы<>неопределено тогда
		idВекторнойБазы = идбазы;
	конецесли;
КонецПроцедуры

&НаКлиенте
Процедура РазместитьВБазе(Команда)
	идфайла = БиблиотекаИскусственногоИнтеллекта.РазместитьФайл(idВекторнойБазы,idФайла,Провайдер);
	если идфайла<>неопределено тогда
		idФайлаВБазе = идфайла;
	конецесли;
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьФайл(Команда)
	дд = новый ДвоичныеДанные(ИмяФайла);
	идфайла = БиблиотекаИскусственногоИнтеллекта.ЗагрузитьФайл(ИмяФайлаВХранилище,дд,Провайдер);
	если идфайла<>неопределено тогда
		idФайла = идфайла;
	конецесли;
КонецПроцедуры

&НаКлиенте
Процедура НовыйЧат(Команда)
	Чат.Очистить();
	Ответ = "";
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьРезультатЗапроса(Команда)
	РезультатЗапроса = БиблиотекаИскусственногоИнтеллекта.ПолучитьРезультатВыполненияЗапроса(ТекстЗапроса,ТипРезультатаЗапроса);
КонецПроцедуры
