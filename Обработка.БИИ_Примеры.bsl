&НаСервере
Функция GetGoodsBalance(параметры)
	Сообщить("[ОТЛАДКА] Начало выполнения GetGoodsBalance");
	Сообщить("[ОТЛАДКА] Параметры: " + параметры);
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(параметры);
	данные = ПрочитатьJSON(ЧтениеJSON);
	ЧтениеJSON.Закрыть();
	запрос = Новый запрос;
	запрос = Новый запрос;
	// Правильный текст запроса с использованием временной таблицы
	запрос.Текст =
		"ВЫБРАТЬ
		|	ТоварыНаСкладахОстатки.Номенклатура.Наименование КАК НоменклатураНаименование,
		|	ТоварыНаСкладахОстатки.ВНаличииОстаток КАК ВНаличииОстаток
		|ИЗ
		|	РегистрНакопления.ТоварыНаСкладах.Остатки КАК ТоварыНаСкладахОстатки
		|ГДЕ
		|	ТоварыНаСкладахОстатки.Номенклатура.Наименование ПОДОБНО &Товар";
   		
		// "ВЫБРАТЬ
		// |	ТоварыНаСкладахОстатки.Номенклатура.Наименование КАК НоменклатураНаименование,
		// |	ТоварыНаСкладахОстатки.ВНаличииОстаток КАК ВНаличииОстаток
		// |ИЗ
		// |	РегистрНакопления.ТоварыНаСкладах.Остатки(&ТекущаяДата, &Условие) КАК ТоварыНаСкладахОстатки
		// |ГДЕ
		// |	ТоварыНаСкладахОстатки.Номенклатура.Наименование ПОДОБНО &Товар";
	
	// Устанавливаем параметр для текущей даты
	запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	
	// Устанавливаем пустое условие для виртуальной таблицы
	запрос.УстановитьПараметр("Условие", Новый Структура);

	// Устанавливаем параметр запроса
	запрос.УстановитьПараметр("Товар", "%" + данные.GoodsName + "%");
	
	// Выполняем запрос и получаем результат
	результатЗапроса = запрос.Выполнить();
	
	// Проверяем, получены ли данные
	Если результатЗапроса.Количество() = 0 Тогда
		Возврат "Не найден товар: " + данные.GoodsName;
	КонецЕсли;
	
	// Получаем выборку
	выборка = результатЗапроса.Выбрать();
	
	// Формируем результат
	Если выборка.Следующий() Тогда
		Сообщить("[ОТЛАДКА] Товар найден, остаток: " + строка(выборка.ВНаличииОстаток));
		Возврат строка(выборка.ВНаличииОстаток);
	Иначе
		Сообщить("[ОТЛАДКА] Товар не найден: " + данные.GoodsName);
		Возврат "Не найден товар: " + данные.GoodsName;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция GetMutalSettlementsBalance(параметры)
	Сообщить("[ОТЛАДКА] Начало выполнения GetMutalSettlementsBalance");
	Сообщить("[ОТЛАДКА] Параметры: " + параметры);
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(параметры);
	данные = ПрочитатьJSON(ЧтениеJSON);
	ЧтениеJSON.Закрыть();
	баланс = 0;
	
	запрос = Новый запрос;
	запрос.Текст =
		"ВЫБРАТЬ
		|	ЕСТЬNULL(РасчетыСКлиентамиОстатки.СуммаОстаток, 0) КАК СуммаОстаток
		|ИЗ
		|	РегистрНакопления.РасчетыСКлиентами.Остатки(, АналитикаУчетаПоПартнерам.Контрагент.Наименование ПОДОБНО &Контрагент) КАК РасчетыСКлиентамиОстатки";
	запрос.УстановитьПараметр("Контрагент", "%" + данные.Partner + "%");
	выб = запрос.Выполнить().Выбрать();
	Если выб.Следующий() Тогда
		баланс = выб.СуммаОстаток;
	КонецЕсли;
	
	запрос = Новый запрос;
	запрос.Текст =
		"ВЫБРАТЬ
		|	ЕСТЬNULL(РасчетыСПоставщикамиОстатки.СуммаОстаток, 0) КАК СуммаОстаток
		|ИЗ
		|	РегистрНакопления.РасчетыСПоставщиками.Остатки(, АналитикаУчетаПоПартнерам.Контрагент.Наименование ПОДОБНО &Контрагент) КАК РасчетыСПоставщикамиОстатки";
	запрос.УстановитьПараметр("Контрагент", "%" + данные.Partner + "%");
	выб = запрос.Выполнить().Выбрать();
	Если выб.Следующий() Тогда
		баланс = баланс + выб.СуммаОстаток;
	КонецЕсли;
	
	Сообщить("[ОТЛАДКА] Итоговый баланс: " + баланс);
	Возврат баланс;
КонецФункции

&НаСервере
Функция need_help(параметры)
	Сообщить("[ОТЛАДКА] Начало выполнения need_help");
	Сообщить("[ОТЛАДКА] Параметры: " + параметры);
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(параметры);
	данные = ПрочитатьJSON(ЧтениеJSON);
	ЧтениеJSON.Закрыть();
	Сообщить("[ОТЛАДКА] Не подобрана функция для запроса: " + данные.UserRequest);
	Возврат "Не удалось подобрать функцию для вопроса:" + символы.ПС + данные.UserRequest;
КонецФункции

&НаСервере
Процедура Вызов(имя, параметры)
	Сообщить("[ОТЛАДКА] Начало выполнения функции: " + имя);
	Сообщить("[ОТЛАДКА] Параметры: " + параметры);
	
	Если имя = "GetGoodsBalance" Тогда
		Ответ = Ответ + GetGoodsBalance(параметры) + символы.ПС;
		Сообщить("[ОТЛАДКА] Выполнена функция GetGoodsBalance");
	ИначеЕсли имя = "GetMutalSettlementsBalance" Тогда
		Ответ = Ответ + GetMutalSettlementsBalance(параметры) + символы.ПС;
		Сообщить("[ОТЛАДКА] Выполнена функция GetMutalSettlementsBalance");
	ИначеЕсли имя = "need_help" Тогда
		Ответ = Ответ + need_help(параметры) + символы.ПС;
		Сообщить("[ОТЛАДКА] Выполнена функция need_help");
	Иначе
		Сообщить("[ОТЛАДКА] ОШИБКА: Неизвестная функция " + имя);
	КонецЕсли;
	
	Сообщить("[ОТЛАДКА] Завершение выполнения функции: " + имя);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьЭлементов()
	элементы.Размышления.Видимость = ПолныйОтвет;
	элементы.ВходныеТокены.Видимость = ПолныйОтвет;
	элементы.ВходныеТокеныВКеше.Видимость = ПолныйОтвет;
	элементы.ВходныеТокеныЗаКешем.Видимость = ПолныйОтвет;
	элементы.ВыходныеТокены.Видимость = ПолныйОтвет;
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	БиблиотекаИскусственногоИнтеллекта.ПроверитьИЗаполнитьСправочники();
КонецПроцедуры

&НаСервере
Функция ПолучитьМассивИнструментов()
	Сообщить("[ОТЛАДКА] Начало получения массива инструментов");
	ми = Новый массив;
	выб = справочники.БИИ_Инструменты.Выбрать();
	
	// Отладка всех инструментов
	Сообщить("[ОТЛАДКА] Список всех инструментов:");
	ксчетчик = 0;
	Пока выб.Следующий() Цикл
		ксчетчик = ксчетчик + 1;
		Сообщить("[ОТЛАДКА] Инструмент " + ксчетчик + ": " + выб.Наименование + ", Встроенный: " + выб.Встроенный);
		Если НЕ выб.Встроенный Тогда
			ми.Добавить(выб.Ссылка);
			Сообщить("[ОТЛАДКА] Добавлен инструмент: " + выб.Наименование);
		КонецЕсли;
	КонецЦикла;
	
	// Если нет инструментов, попробуем временное решение для тестирования
	Если ми.Количество() = 0 Тогда
		Сообщить("[ОТЛАДКА] Нет невстроенных инструментов. Попытка добавить все инструменты для теста.");
		выб = справочники.БИИ_Инструменты.Выбрать();
		Пока выб.Следующий() Цикл
			ми.Добавить(выб.Ссылка);
			Сообщить("[ОТЛАДКА] Добавлен любой инструмент для теста: " + выб.Наименование);
		КонецЦикла;
	КонецЕсли;
	
	Сообщить("[ОТЛАДКА] Всего инструментов: " + ми.Количество());
	Возврат ми;
КонецФункции

&НаКлиенте
Процедура ПолучитьОтвет(Команда)
	Если значениезаполнено(Изображение) Тогда
		стПромт = Новый структура;
		стПромт.Вставить("текст", Промт);
		дд = Новый ДвоичныеДанные(Изображение);
		//стПромт.Вставить("изображение","data:image/png;base64,"+Base64Строка(дд));
		
		стПромт.Вставить("тип", "image/png");
		стПромт.Вставить("изображение", Base64Строка(дд));
		
	Иначе
		стПромт = Промт;
	КонецЕсли;
	
	опции = Новый структура;
	Если значениезаполнено(БюджетРазмышлений) Тогда
		ст = Новый структура;
		ст.Вставить("type", "enabled");
		ст.Вставить("budget_tokens", БюджетРазмышлений);
		опции.Вставить("thinking", ст);
	КонецЕсли;
	
	Если РежимРассуждений Тогда
		ст = Новый структура;
		ст.Вставить("mode", "ENABLED_HIDDEN");
		опции.Вставить("reasoningOptions", ст);
	КонецЕсли;
	
	Если опции.Количество() = 0 Тогда
		опции = неопределено;
	КонецЕсли;
	
	ми = ПолучитьМассивИнструментов();
	Если ми.Количество() = 0 Тогда
		Если значениезаполнено(СхемаОтвета) Тогда
			результат = БиблиотекаИскусственногоИнтеллекта.Генерация(стПромт, Модель, Температура, , СистемныйПромт, ПолныйОтвет, СхемаОтвета, опции);
		Иначе
			результат = БиблиотекаИскусственногоИнтеллекта.Генерация(стПромт, Модель, Температура, , СистемныйПромт, ПолныйОтвет, , опции);
		КонецЕсли;
		Если результат = неопределено Тогда
			Ответ = "";
			Размышления = "";
			ВходныеТокены = 0;
			ВходныеТокеныВКеше = 0;
			ВходныеТокеныЗаКешем = 0;
			ВыходныеТокены = 0;
		Иначе
			Если ПолныйОтвет Тогда
				Ответ = результат.ТекстОтвета;
				Размышления = результат.Размышления;
				ВходныеТокены = результат.ВходныеТокены;
				ВходныеТокеныВКеше = результат.ВходныеТокеныВКеше;
				ВходныеТокеныЗаКешем = результат.ВходныеТокеныЗаКешем;
				ВыходныеТокены = результат.ВыходныеТокены;
			Иначе
				Ответ = результат;
			КонецЕсли;
		КонецЕсли;
	Иначе
		результат = БиблиотекаИскусственногоИнтеллекта.Генерация(стПромт, Модель, Температура, ми, СистемныйПромт, ПолныйОтвет, , опции);
		Если строка(типзнч(результат)) = "Массив" Тогда
			Ответ = "";
			Размышления = "";
			ВходныеТокены = 0;
			ВходныеТокеныВКеше = 0;
			ВходныеТокеныЗаКешем = 0;
			ВыходныеТокены = 0;
			
			Сообщить("[ОТЛАДКА] Получен массив вызовов функций, количество: " + результат.Количество());
			
			Для Каждого стр Из результат Цикл
				Сообщить("[ОТЛАДКА] Вызов функции: " + стр.function.name + " с аргументами: " + Строка(стр.function.arguments));
				Вызов(стр.function.name, стр.function.arguments);
			КонецЦикла;
			
			Сообщить("[ОТЛАДКА] Завершена обработка всех вызовов функций");
		Иначе
			Если ПолныйОтвет Тогда
				Ответ = результат.ТекстОтвета;
				Размышления = результат.Размышления;
				ВходныеТокены = результат.ВходныеТокены;
				ВходныеТокеныВКеше = результат.ВходныеТокеныВКеше;
				ВходныеТокеныЗаКешем = результат.ВходныеТокеныЗаКешем;
				ВыходныеТокены = результат.ВыходныеТокены;
			Иначе
				Ответ = результат;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПолныйОтветПриИзменении(Элемент)
	УстановитьВидимостьЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	УстановитьВидимостьЭлементов();
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьПоискВИнтернете()
	Возврат справочники.БИИ_Инструменты.НайтиПоНаименованию("web_search_preview")
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьПоискВВекторнойБазе()
	Возврат справочники.БИИ_Инструменты.НайтиПоНаименованию("file_search")
КонецФункции

&НаКлиенте
Процедура ПолучитьОтветResponse(Команда)
	Если ПоискВИнтернете Тогда
		минст = Новый массив;
		минст.Добавить(ПолучитьПоискВИнтернете());
		результат = БиблиотекаИскусственногоИнтеллекта.Ответ(Промт, Модель, минст, , РежимЧата);
	ИначеЕсли ПоискВВекторнойБазе Тогда
		опции = Новый структура;
		опции.Вставить("vector_store_id", idВекторнойБазы);
		минст = Новый массив;
		минст.Добавить(ПолучитьПоискВВекторнойБазе());
		результат = БиблиотекаИскусственногоИнтеллекта.Ответ(Промт, Модель, минст, опции, РежимЧата);
	Иначе
		Если РежимЧата Тогда
			Если чат.Количество() > 0 Тогда
				опции = Новый структура;
				опции.Вставить("previous_response_id", чат[чат.Количество() - 1].id);
				результат = БиблиотекаИскусственногоИнтеллекта.Ответ(Промт, Модель, , опции, истина);
			Иначе
				результат = БиблиотекаИскусственногоИнтеллекта.Ответ(Промт, Модель, , , истина);
			КонецЕсли;
		Иначе
			результат = БиблиотекаИскусственногоИнтеллекта.Ответ(Промт, Модель);
		КонецЕсли;
	КонецЕсли;
	Если РежимЧата Тогда
		Ответ = Ответ + символы.ПС + "Вопрос:" + символы.ПС + Промт;
		Ответ = Ответ + символы.ПС + "Ответ:" + символы.ПС + результат.ТекстОтвета;
		нстр = Чат.Добавить();
		нстр.id = результат.id;
	Иначе
		Ответ = результат;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СоздатьВекторнуюБазу(Команда)
	идбазы = БиблиотекаИскусственногоИнтеллекта.СоздатьВекторнуюБазу(ИмяВекторнойБазы, Провайдер);
	Если идбазы <> неопределено Тогда
		idВекторнойБазы = идбазы;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РазместитьВБазе(Команда)
	идфайла = БиблиотекаИскусственногоИнтеллекта.РазместитьФайл(idВекторнойБазы, idФайла, Провайдер);
	Если идфайла <> неопределено Тогда
		idФайлаВБазе = идфайла;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьФайл(Команда)
	дд = Новый ДвоичныеДанные(ИмяФайла);
	идфайла = БиблиотекаИскусственногоИнтеллекта.ЗагрузитьФайл(ИмяФайлаВХранилище, дд, Провайдер);
	Если идфайла <> неопределено Тогда
		idФайла = идфайла;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НовыйЧат(Команда)
	Чат.Очистить();
	Ответ = "";
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьРезультатЗапроса(Команда)
	РезультатЗапроса = БиблиотекаИскусственногоИнтеллекта.ПолучитьРезультатВыполненияЗапроса(ТекстЗапроса, ТипРезультатаЗапроса);
КонецПроцедуры